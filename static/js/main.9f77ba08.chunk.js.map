{"version":3,"sources":["Components/TriplList/TripList.module.css","Components/TriplList/TripList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TripList","state","initialItems","props","content","items","isEmpty","sortFlag","toggleSort","key","newList","setState","sortUp","sortDown","sort","a","b","filterList","event","e","target","value","toLowerCase","filter","item","fromName","includes","toName","length","className","style","nav","Button","onClick","variant","color","margin","TextField","id","label","type","onChange","this","Box","bgcolor","p","position","textAlign","top","left","zIndex","boxShadow","borderRadius","map","Card","shortid","generate","card","CardContent","Typography","title","component","departAt","vehicle","Component","App","tripsData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f77ba08.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"TripList_main__314mB\",\"card\":\"TripList_card__38Ftl\",\"nav\":\"TripList_nav__1kyGB\"};","import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\n\r\n// style\r\nimport style from \"./TripList.module.css\";\r\n// MUI Stuff\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nclass TripList extends Component {\r\n  state = {\r\n    initialItems: this.props.content,\r\n    items: this.props.content,\r\n    isEmpty: false,\r\n    sortFlag: false\r\n  };\r\n  toggleSort = key => {\r\n    const { initialItems } = this.state;\r\n\r\n    let newList = initialItems;\r\n    this.setState({\r\n      initialItems: this.state.sortFlag\r\n        ? this.sortUp(key, newList)\r\n        : this.sortDown(key, newList),\r\n      sortFlag: !this.state.sortFlag\r\n    });\r\n  };\r\n  sortDown = (key, newList) =>\r\n    newList.sort((a, b) => (a[key] < b[key] ? 1 : b[key] < a[key] ? -1 : 0));\r\n\r\n  sortUp = (key, newList) =>\r\n    newList.sort((a, b) => (a[key] > b[key] ? 1 : b[key] > a[key] ? -1 : 0));\r\n\r\n  filterList = event => {\r\n    let items = this.state.initialItems;\r\n    const e = event.target.value.toLowerCase();\r\n    items = items.filter(item => {\r\n      return (\r\n        item.fromName.toLowerCase().includes(e) ||\r\n        item.toName.toLowerCase().includes(e)\r\n      );\r\n    });\r\n    if (items.length === 0) {\r\n      this.setState({ isEmpty: true });\r\n    } else {\r\n      this.setState({ isEmpty: false });\r\n    }\r\n    this.setState({ items: items });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className={style.nav}>\r\n          <Button\r\n            onClick={() => this.toggleSort(\"fromName\")}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ margin: 20 }}\r\n          >\r\n            Sort by dispatch\r\n          </Button>\r\n          <TextField\r\n            id=\"outlined-search\"\r\n            label=\"Search field\"\r\n            type=\"search\"\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            onChange={this.filterList}\r\n          />\r\n          {this.state.isEmpty ? (\r\n            <Box\r\n              bgcolor=\"grey.700\"\r\n              color=\"white\"\r\n              p={1}\r\n              position=\"absolute\"\r\n              textAlign=\"center\"\r\n              top=\"19%\"\r\n              left=\"43%\"\r\n              zIndex=\"tooltip\"\r\n              boxShadow={3}\r\n              borderRadius={10}\r\n            >\r\n              <p>No results found</p>\r\n            </Box>\r\n          ) : null}\r\n          <Button\r\n            onClick={() => this.toggleSort(\"toName\")}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ margin: 20 }}\r\n          >\r\n            Sort by delivery\r\n          </Button>\r\n        </div>\r\n        {this.state.items.map(item => {\r\n          return (\r\n            <Card key={shortid.generate()} className={style.card}>\r\n              <CardContent>\r\n                <Typography className={style.title} color=\"textSecondary\">\r\n                  Trip\r\n                </Typography>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                  From: {item.fromName}\r\n                </Typography>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                  To: {item.toName}\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  Dispatch: {item.departAt}\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  Vehicle: {item.vehicle}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TripList;\r\n","import React from \"react\";\nimport \"./App.css\";\n\n// get data\nimport TripList from \"./Components/TriplList/TripList\";\n\nimport tripsData from \"./data/trips.json\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"> Voypost App Search</header>\n      <TripList content={tripsData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}